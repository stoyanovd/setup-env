# 16.04

# set English as primarily  
# set short(!) name (or even "user", at the moment I haven't got problems with it)

# As I understand, not everything can be installed in one step.
# (maybe it is suitable to reboot between steps?)
sudo apt update
sudo apt upgrade
sudo apt update
sudo apt upgrade

# set nvidia driver (if nouveau is set) in 
# Settings -> Software and Updates -> Additional drivers

# chrome (just download from official website)

# maybe CUDA is appropriate?
# You should install it as early as you can
###################################


###################################
# Possible problems with Nvidia
##############

# (nvidia-common can be useful package to get nvidia worked)
# Plain text mode:  
# http://ask.xmodulo.com/boot-into-command-line-ubuntu-debian.html

# sudo vi /etc/default/grub

# GRUB_CMDLINE_LINUX += "text"
# GRUB_TERMINAL += "console"
# sudo systemctl set-default multi-user.target
# sudo systemctl set-default graphical.target


###################################
# apt packages (not very nice separation...) 
##############

# start pack
sudo apt install build-essential git vim curl cmake cmake-qt-gui wget zsh python-dev python3-dev python-pip python3-pip python-distutils-extra python3-distutils-extra htop apcalc w3m lynx xclip inxi tmux tree screen xtightvncviewer unrar p7zip traceroute

# more compiler tools
sudo apt install gfortran autoconf automake checkinstall openjdk-8-jdk yasm

sudo apt install nvidia-settings

sudo -H pip install --upgrade pip virtualenv
sudo -H pip3 install --upgrade pip virtualenv

# Let's go with pyenv for fresh python release
# https://askubuntu.com/questions/865554/how-do-i-install-python-3-6-using-apt-get

# OpenCV supply  
sudo apt install libgtk2.0-dev pkg-config libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev libgtk-3-dev
    
# Python additions stack (Yes, you need it, Twisted cryptography can't be built without it)
sudo apt install libffi-dev libssl-dev  
sudo -H pip install 'requests[security]'
    
#  fixing lxml problems and some others
# sudo apt install libxml2-dev libxslt-dev libxslt1-dev  libcurl4-openssl-dev  libcups2-dev libsmbclient-dev  libapt-pkg-dev

###################################
# User-space OS settings
##############

Keyboard -> Text Entry:
   - Allow different layouts for individual windows
Keyboard -> Shortcuts -> System
   - no "Lock screen" shortcut
Battery:
   - no Suspend on Lid close
Brightness & Lock
   - Lock (or not lock)

Synaptics
xinput list
# Finger Low/High/Press
# Look specs here: ftp://www.x.org/pub/X11R7.5/doc/man/man4/synaptics.4.html#sect3
# and discussion here: https://askubuntu.com/questions/483707/14-04-touchpad-is-too-sensitive
# don't know good settings for my MSI, try this, it's not very bad
xinput set-prop "name/id" "Synaptics Finger" 55 55 255

###################################
# oh-my-zsh
##############

sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

###################################
# ssh
##############

# Set SSH in GitHub and BitBucket.
ssh-keygen -t rsa -b 4096 -C "stoyanovd@mail.ru"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
xclip -sel clip < ~/.ssh/id_rsa.pub

###################################
# Dot files (YADM)
##############

# export proxy explicitly in console

sudo curl -fLo /usr/local/bin/yadm https://github.com/TheLocehiliosan/yadm/raw/master/yadm && sudo chmod a+x /usr/local/bin/yadm

# yadm config local.class Work

# --force to rewrite .zshrc
yadm clone -f git@bitbucket.org:stoyanovd/yadm-files.git

# yadm alt

# export proxy to .zshrc

# git settings are already set with yadm
# git config --global push.default simple
# git config --global core.excludesfile ~/.gitignore_global

# oh-my-zsh plugins are already set (let's repeat them here)
# plugins=(git catimg command-not-found common-aliases compleat history pip python screen sudo z)

###################################
# pyenv
##############

# dependencies
sudo apt-get install -y build-essential libbz2-dev libssl-dev libreadline-dev \
                        libsqlite3-dev tk-dev
# optional scientific package headers (for Numpy, Matplotlib, SciPy, etc.)
sudo apt-get install -y libpng-dev libfreetype6-dev   


curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash

# Add these lines to your .zshrc (as suggests pyenv-installer script), change 'user' to your user:
# Strangely, path with ~ doesn't work here...
  export PATH="/home/user/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"

# restart shell

pyenv install 3.6.0

#######
# 1. you want some "global" python (let's call this env "general"):
pyenv virtualenv 3.6.0 general
pyenv global general

#######
# if you want "local" python per-project (it's more accurate way), do this. Let's call local env "other_proj":
pyenv virtualenv 3.6.0 local_proj
# go to dir
pyenv local other_proj
# restart shell
# go to dir
pip install numpy scipy matplotlib ipython jupyter pandas sympy nose


###
# useful tool, though I didn't check what algo it uses
# # install pip-autoremove
# pip install pip-autoremove
# # remove "somepackage" plus its dependencies:
# pip-autoremove somepackage -y

### 
# Don't forget to activate pyenv plugin for oh-my-zsh:
# go to ~/.zshrc, and add pyenv to your plugins
# i.e. if you have such string
#    plugins=(git history pip python sudo z)
# change to this:
#    plugins=(git history pip python sudo z pyenv)


###################################
# Modern g++
##############

# it seems ok, to make symbolic link in g++ to g++-7 (even without touch gcc)
# I don't remember how exaxtly I did this, but sth with this repository:
# ppa:jonathonf/gcc-7.1 (nearly automatic install)

###################################
# VPN
##############

# get fresh openvpn builds:
# https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos
sudo wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg|sudo apt-key add -
sudo echo "deb http://build.openvpn.net/debian/openvpn/stable xenial main" > /etc/apt/sources.list.d/openvpn-aptrepo.list
sudo apt-get update && sudo apt-get install openvpn

# NordVPN
# https://nordvpn.com/tutorials/linux/openvpn/

###################################
# a bit User space
##############

# Anaconda (?)

sudo apt install kolourpaint4 gimp inkscape vlc gparted postgresql doxygen graphviz tor  

# make user in postgresql
sudo -u postgres createuser -s dima
sudo -u postgres createdb dima

# possibly need to psql
# possibly no
# sudo apt install libpq-dev postgresql postgresql-contrib

###
sudo add-apt-repository ppa:webupd8team/sublime-text-3
sudo add-apt-repository ppa:slgobinath/safeeyes
sudo apt update
sudo apt install sublime-text-installer safeeyes
safeeyes
###

# old in repos:
# geogebra filezilla  

# samba ???

mkdir ~/setups
mkdir ~/work

# set language swap setting

###################################
# JetBrains through toolbox
##############

cd ~/setups
wget "https://download.jetbrains.com/toolbox/jetbrains-toolbox-1.2.2314.tar.gz"
tar -xvzf ./$(ls . G jetbrains-toolbox)
cd ./$(ls . G jetbrains-toolbox)
./jetbrains-toolbox

# https://www.jetbrains.com/toolbox/app/
# IDEA, PyCharm, CLion
# ignore, Markdown

#######################################
# Virtualization

# https://www.virtualbox.org/wiki/Linux_Downloads

# Docker
# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

# Vagrant is very easy to use.
# Download from there (it's more modern than in official repos):
# https://www.vagrantup.com/downloads.html

# next you make dir for vagrant project and inside it
# either `vagrant init` to get default or
# copy Vagrantfile from (e.g.) here https://gist.github.com/turtlemonvh/2f40fa7ca0acaaabaf6a6ecb0ee556c7

# there is "vagrant share" tool, you need ngrok for it (for vagrant 2.0+)
# it can be downloaded from official site, and added to path


#######################################

### Stop at the moment

# ceres

# opencv

# eigen

# MVE ?
